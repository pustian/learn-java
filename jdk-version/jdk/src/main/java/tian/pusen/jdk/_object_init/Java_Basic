1, Java基础
命名规则： 
    在面向对象编程中，对于类，对象，方法，变量等方面的命名是非常有技巧的。
    应该本着描述性以及唯一性这两大特征来命名。
  包的命名：Java包的名字都是由小写单词组成。在最新的Java编程规范中，要求程序员在自己定义的包的名称之前加上唯一的前缀。
  类的命名：有一点命名技巧就是由于类是设计用来代表对象的，所以在命名类时应尽量选择名词。 　　
    类的名字必须由大写字母开头而单词中的其他字母均为小写；
    如果类名称由多个单词组成，则每个单词的首字母均应为大写；
    如果类名称中包含单词缩写，则这个所写词的每个字母均应大写
  变量的命名: 变量名称是区分大小写的。
    变量的名称可以是任何合法的标识符———一个无限长度的Unicode字母和数字序列，以字母，美元符号“$”，或“下划线”_“开头。
    按照惯例，变量一般是以字母开头，而不是”$”和“_”。变量名应该尽量避免使用$。下划线字符“_”开始的变量名。空格是不允许的。
  方法的命名：方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头。
  常量的命名：常量的名字应该都使用大写字母，并且指出该常量完整含义。如果一个常量名称由多个单词组成，则应该用下划线来分割这些单词。
  参数的命名：参数的命名规范和方法的命名规范相同，在尽量保证参数名称为一个单词的情况下使参数的命名尽可能明确。
  Javadoc注释:Javadoc注释是一种多行注释，以/**开头，而以*/结束，注释可以包含一些HTML标记符和专门的关键词。
    使用Javadoc注释的好处是编写的注释可以被自动转为在线文档，省去了单独编写程序文档的麻烦。
   
java编程语言支持八种原生类型：
  byte:byte的数据类型是一个8位有符号的二进制补码整数。最小值是128，最大值是127(包括)。
       当节省内存很重要，byte数据类型在大数组中节省内存很有用。
       如果变量的值的限制有利于澄清代码，也可以用byte替代int；
       事实上，变量的范围限制，可以作为文档形式。
  short:short数据类型是16位的有符号的补码整数。最小值是-32,768 ，最大值是32,767 (包括)。
        和byte相比，也有一样准则：当节省内存很重要，short数据类型在大数组中节省内存很有用。
  int:int数据类型是32位的有符号的补码整数。最小值是-2,147,483,648 ，最大值是2,147,483,647 (包括)。
      对于完整的值，这个数据类型通常是默认选择，除非有其他原因(例如上述原因)。
      这个数据类型大多数情况下，足够你的程序使用整数。如果你需要一个更大范围的值，可以使用long。
  long:long数据类型是64位的有符号的补码整数。最小值是-9,223,372,036,854,775,808 ，最大值是9,223,372,036,854,775,807 (包括)。
       当需要的值范围超过了int，就可以使用这个数据类型。
  float:float 数据类型是单精度 32 位 IEEE 754 浮点数。它的值的范围超出了本讨论，但是可以参考java语言规范的浮点类型。
        和byte，short的建议一样，当你使用大量浮点数数组，需要节省内存，使用float。
        此数据类型永远不应该用于精确的值，如货币。为此，您将需要使用 java.math.BigDecimal 类来代替。
        Java 平台提供数字和字符串包括 BigDecimal 和的其他有用的类。
  double:double数据类型是单精度 64 位 IEEE 754 浮点数。它的值的范围超出了本讨论，但是可以参考java语言规范的浮点类型。
         对于小数值，这个数据类型是默认选择。如上面的建议，此数据类型永远不应该用于精确的值。
  boolean:boolean数据类型只有两个可能值:true和false.使用此数据作为简单标记来跟踪真/假条件。
          这种数据类型代表一个比特的信息，但它的“大小”没有明确界定。
  char：char数据类型是单个16 位Unicode 字符。它的最小值是'\u0000' (或0),最大值是'\uffff'(或65,535 包括).
  除了上面列出的8个原生数据类型，java编程语言通过类java.lang.String提供字符串的特殊支持。
  使用两个双引号包围字符串，会自动创建String对象；例如，String s = "this is a string";
  String对象是不可变的，这表示它一旦被创建，它的值就不可变。
  类String从技术上讲，它不是一个原生类型，但是可以认为，它是java语言特殊支持的，你可能会倾向于认为它是原生类型。
  
  原生类型的默认值	
	Data Type	Default Value (for fields)
	byte 	0
	short 	0
	int 	0
	long 	0L
	float 	0.0f
	double 	0.0d
	char 	'\u0000'
	boolean 	false
	String(or any object)   null
  局部变量略有不同，编译器不会给一个没有初始化的局部变量赋默认值。
  如果你没有在局部变量声明时，初始化变量，那么，你必须在使用它之前给它赋值。
  访问一个没有初始化的局部变量，编译器会报错。 

java编程语言定义以下类型的变量：
  实例变量(非static字段)
  类变量(static字段)
  局部变量(方法里存储临时状态的变量)
  参数(方法签名对应的变量)
	  
运算符
	操作符优先级 操作符	优先级
	后缀 	expr++ expr--
	一元 	++expr --expr +expr -expr ~ !
	乘法 	* / %
	加法 	+ -
	移位 	<< >> >>>
	比较 	< > <= >= instanceof
	相等 	== !=
	位与 	&
	按位异或 	^
	OR运算 	|
	逻辑与 	&&
	逻辑或 	||
	三元 	? :
	赋值 	= += -= *= /= %= &= ^= |= <<= >>= >>>=
	
java编程语言分支
  决策语句(if-then, if-then-else, switch)，
  循环语句(for,while, do-while),分支语句(break, continue, return)。
  switch语句可以有多个可能的执行路径。
  byte、char、short、int、枚举  基本类型的包装类 以上是JDK1.6以前的版本
  JDK1.7时，又增加了String

  
Java 数组

